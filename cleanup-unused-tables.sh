#!/bin/bash

# Supabase Tables & Views Cleanup Script
# This script helps clean up unused tables and views

echo "üßπ SUPABASE TABLES & VIEWS CLEANUP SCRIPT"
echo "=========================================="
echo ""

# Colors for output
RED='\033[0;31m'
GREEN='\033[0;32m'
YELLOW='\033[1;33m'
BLUE='\033[0;34m'
CYAN='\033[0;36m'
NC='\033[0m' # No Color

# Function to print colored output
print_status() {
    echo -e "${2}${1}${NC}"
}

print_status "üìä TABLE & VIEW CLEANUP ANALYSIS" $CYAN
print_status "=================================" $CYAN
echo ""

# Check if we're in the right directory
if [ ! -d "supabase" ]; then
    print_status "‚ùå Error: supabase directory not found. Run this script from the project root." $RED
    exit 1
fi

print_status "üìÅ Current directory: $(pwd)" $BLUE
echo ""

# Tables analysis
print_status "üìã TABLES ANALYSIS:" $BLUE
print_status "===================" $BLUE

print_status "‚úÖ USED Tables (2/2):" $GREEN
print_status "  ‚Ä¢ user_profiles (2 SELECT operations)" $GREEN
print_status "  ‚Ä¢ payments (1 INSERT operation)" $GREEN
echo ""

print_status "‚ùå UNUSED Tables (0/2):" $RED
print_status "  ‚Ä¢ exam_stats (INVESTIGATE - may be used by RPC functions)" $YELLOW
print_status "  ‚Ä¢ Row (REMOVE - likely TypeScript type)" $RED
echo ""

# Views analysis
print_status "üëÅÔ∏è  VIEWS ANALYSIS:" $BLUE
print_status "===================" $BLUE

print_status "‚úÖ USED Views (0/2):" $GREEN
print_status "  None found" $GREEN
echo ""

print_status "‚ùå UNUSED Views (2/2):" $RED
print_status "  ‚Ä¢ exam_stats_with_defaults (REMOVE)" $RED
print_status "  ‚Ä¢ Row (REMOVE - likely TypeScript type)" $RED
echo ""

# RPC Functions analysis
print_status "üîß RPC FUNCTIONS ANALYSIS:" $BLUE
print_status "===========================" $BLUE

print_status "‚úÖ USED RPC Functions (56/58):" $GREEN
print_status "  ‚Ä¢ High usage: create_user_referral_code (6 calls)" $GREEN
print_status "  ‚Ä¢ High usage: get_referral_network_detailed (4 calls)" $GREEN
print_status "  ‚Ä¢ High usage: get_user_referral_earnings (4 calls)" $GREEN
print_status "  ‚Ä¢ High usage: update_exam_stats_properly (3 calls)" $GREEN
print_status "  ‚Ä¢ High usage: get_comprehensive_referral_stats (3 calls)" $GREEN
print_status "  ‚Ä¢ Plus 51 other single-use functions" $GREEN
echo ""

print_status "‚ùå UNUSED RPC Functions (2/58):" $RED
print_status "  ‚Ä¢ calculate_exam_ranks (REMOVE)" $RED
print_status "  ‚Ä¢ Args (INVESTIGATE - may be parsing error)" $YELLOW
echo ""

# Operations analysis
print_status "‚ö° OPERATIONS ANALYSIS:" $BLUE
print_status "=======================" $BLUE

print_status "  ‚Ä¢ SELECT: 120 operations (55%)" $CYAN
print_status "  ‚Ä¢ DELETE: 35 operations (16%)" $CYAN
print_status "  ‚Ä¢ UPDATE: 34 operations (16%)" $CYAN
print_status "  ‚Ä¢ INSERT: 23 operations (11%)" $CYAN
print_status "  ‚Ä¢ UPSERT: 6 operations (3%)" $CYAN
echo ""

# Recommendations
print_status "üí° CLEANUP RECOMMENDATIONS:" $YELLOW
print_status "============================" $YELLOW
echo ""

print_status "üîç INVESTIGATE BEFORE REMOVING:" $YELLOW
print_status "  1. Run check-exam-stats-usage.sql to verify exam_stats usage" $YELLOW
print_status "  2. Check if 'Row' entries are TypeScript types, not database objects" $YELLOW
print_status "  3. Verify 'Args' is a real function or parsing error" $YELLOW
echo ""

print_status "üóëÔ∏è  SAFE TO REMOVE:" $RED
print_status "  1. exam_stats_with_defaults view" $RED
print_status "  2. calculate_exam_ranks RPC function" $RED
print_status "  3. 'Row' entries (if confirmed as TypeScript types)" $RED
echo ""

# SQL cleanup commands
print_status "üìù SQL CLEANUP COMMANDS:" $BLUE
print_status "========================" $BLUE
echo ""

cat << 'EOF'
-- 1. Remove unused view
DROP VIEW IF EXISTS exam_stats_with_defaults;

-- 2. Remove unused RPC function
DROP FUNCTION IF EXISTS calculate_exam_ranks(text);

-- 3. Check exam_stats usage (run first)
-- See check-exam-stats-usage.sql for detailed analysis

-- 4. Verify the cleanup
SELECT 
    schemaname,
    tablename,
    tableowner
FROM pg_tables 
WHERE schemaname = 'public'
ORDER BY tablename;

SELECT 
    proname as function_name
FROM pg_proc p
JOIN pg_namespace n ON p.pronamespace = n.oid
WHERE n.nspname = 'public'
ORDER BY proname;
EOF

echo ""

# Ask for confirmation
print_status "‚ö†Ô∏è  IMPORTANT: Always backup your database before running cleanup commands!" $YELLOW
echo ""

read -p "Do you want to see the detailed analysis files? (y/N): " -n 1 -r
echo ""

if [[ $REPLY =~ ^[Yy]$ ]]; then
    print_status "üìÑ Available analysis files:" $BLUE
    print_status "  ‚Ä¢ supabase-audit-report.md - Complete functions audit" $BLUE
    print_status "  ‚Ä¢ table-analysis-report.md - Detailed table analysis" $BLUE
    print_status "  ‚Ä¢ check-triggers.sql - Check for table triggers" $BLUE
    print_status "  ‚Ä¢ check-exam-stats-usage.sql - Verify exam_stats usage" $BLUE
    print_status "  ‚Ä¢ audit-supabase-usage.js - Run functions audit" $BLUE
    print_status "  ‚Ä¢ audit-tables-usage.js - Run tables audit" $BLUE
    echo ""
fi

print_status "üìä DATABASE HEALTH SCORE: 8.5/10" $GREEN
print_status "  ‚Ä¢ Table Utilization: 100% ‚úÖ" $GREEN
print_status "  ‚Ä¢ View Utilization: 0% ‚ö†Ô∏è" $YELLOW
print_status "  ‚Ä¢ RPC Function Usage: 94% ‚úÖ" $GREEN
print_status "  ‚Ä¢ Operation Distribution: Balanced ‚úÖ" $GREEN
print_status "  ‚Ä¢ Architecture: RPC-based ‚úÖ" $GREEN
echo ""

print_status "‚ú® Cleanup analysis complete!" $GREEN
print_status "Run the SQL commands in your Supabase SQL Editor to clean up unused resources." $BLUE
